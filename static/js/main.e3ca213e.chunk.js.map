{"version":3,"sources":["components/Header/Header.js","components/Home/Home.js","components/Search/Search.js","components/Search/InputCity/InputCity.js","components/Search/SearchCity/SearchCity.js","components/ui/Toggle.js","utils.js","components/TableInfo/TableInfoDay/TableInfoDay.js","components/TableInfo/TableInfoWeek/TableRow/TableRow.js","components/TableInfo/TableInfoWeek/TableInfoWeek.js","components/TableInfo/TableInfo.js","components/ErrorWindow/ErrorWindow.js","components/Weather/Weather.js","App.js","index.js"],"names":["Header","className","to","Home","style","height","Search","props","InputCity","Toggle","SearchCity","onKeyDown","event","onChange","autoFocus","placeholder","value","onClick","leftField","type","checked","rightFied","convertToCelsium","Math","round","getDate","timestamp","min","date","Date","getMinutes","console","log","getHours","TableInfoDay","dayData","tempInCelsium","dt","weatherProfile","profile","bg","temp","info","sunset","display","pressure","humidity","sunrise","weekDays","yearMonths","TableRow","weekDate","weekTemp","weekPessure","weekhumidity","dayNum","getDay","monthNum","getMonth","dateNum","TableInfoWeek","weekData","view","map","e","i","average","TableInfo","data","useState","setChecked","list","city","name","slice","main","sys","weather","ErrorWindow","Weather","navigate","useNavigate","useParams","responseObj","checkedWeat","error","setData","useEffect","getTableInfo","fetch","then","response","ok","Error","json","res","catch","target","code","preventDefault","stopPropagation","App","path","exact","element","handleChange","changeWeat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0ZAceA,MAVf,WACI,OACI,8BACI,wBAAQC,UAAU,aAAlB,SACI,cAAC,IAAD,CAAMC,GAAG,IAAT,SAAa,kD,aCHd,SAASC,IACpB,OACI,gCACI,qBAAKF,UAAU,cAAf,4yIAGA,eAAC,IAAD,CAAMC,GAAG,sBAAT,UACI,qBAAKD,UAAU,kBAAf,SACI,8DAEJ,qBAAKG,MAAO,CAAEC,OAAQ,gB,wBCGvBC,MAff,SAAgBC,GACZ,OACI,sBAAKN,UAAU,UAAf,UACI,oEACA,sBAAKA,UAAU,mBAAf,UACKM,EAAMC,UACP,sBAAKP,UAAU,8BAAf,UACI,qBAAKA,UAAU,mBAAf,SAAmCM,EAAME,SACxCF,EAAMG,qB,MCMZF,MAdf,SAAmBD,GACf,OACI,qBAAKN,UAAU,iBAAf,SACI,uBACIU,UAAW,SAACC,GAAD,OAAWL,EAAMM,SAASD,IACrCE,WAAS,EACTC,YAAY,aACZC,MAAOT,EAAMS,MACbH,SAAUN,EAAMM,c,MCCjBH,MATf,SAAoBH,GAEhB,OACI,qBAAKN,UAAU,uBAAf,SACI,wBAAQgB,QAASV,EAAMU,QAAvB,uB,YCSGR,MAbf,SAAgBF,GACZ,OACI,sBAAKN,UAAU,WAAf,UACI,qBAAKA,UAAU,uBAAf,SAAsC,8BAAMM,EAAMW,cAClD,wBAAOjB,UAAU,SAAjB,UACI,uBAAOkB,KAAK,WAAWC,QAASb,EAAMa,QAASP,SAAUN,EAAMM,WAC/D,sBAAMZ,UAAU,oBAEpB,qBAAKA,UAAU,sBAAf,SAAqC,8BAAMM,EAAMc,kBCXhDC,EAAmB,SAACN,GAC7B,OAAOO,KAAKC,MAAMR,EAAQ,MAGjBS,EAAU,SAACC,GACpB,IACIC,EADAC,EAAO,IAAIC,KAAiB,IAAZH,GAOpB,OAJIC,EADAC,EAAKE,aAAe,GACd,IAAMF,EAAKE,aAEXF,EAAKE,aACbC,QAAQC,IAAIN,GACPE,EAAKK,WAAa,IAAMN,G,MCuDpBO,MA/Df,YAAuE,IAA/CC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,eAEhD,EAAmC,WAC/B,IAAIC,EAASC,EAAIC,EAAMC,EAEvB,OAAQJ,GACJ,IAAK,SAAUC,EAAU,QACrB,MACJ,IAAK,QAASA,EAAU,GACpB,MACJ,IAAK,OAAQA,EAAU,OACnB,MACJ,IAAK,OAAQA,EAAU,OAc3B,OAVIF,EAAKF,EAAQQ,QACbH,EAAK,WACLC,EAAO,aACPC,EAAO,eAEPF,EAAK,SACLC,EAAO,WACPC,EAAO,YAGJ,CAACH,EAASC,EAAIC,EAAMC,GAxBI,GAAnC,mBAAOH,EAAP,KAAgBC,EAAhB,KAAoBC,EAApB,KAA0BC,EAA1B,KA2BA,OACI,sBAAKzC,UAAS,+BAA0BsC,EAA1B,YAAqCC,GAAnD,UACI,qBAAKvC,UAAU,iBAAf,SACI,sBAAKG,MAAO,CAAEwC,QAAS,QAAvB,UACKP,EAAKF,EAAQQ,OACV,qBAAK1C,UAAU,iBACf,qBAAKA,UAAU,gBACnB,qBAAKA,UAAS,eAAUwC,GAAxB,SACI,8BAAOL,EAAuDb,KAAKC,MAAMW,EAAQM,MAAQ,IAAlEnB,EAAiBa,EAAQM,MAAQ,kBAIpE,sBAAKxC,UAAS,yBAAoByC,GAAlC,UACI,sBAAKzC,UAAU,iBAAf,UACI,qBAAKA,UAAU,2BACf,sBAAKA,UAAU,OAAf,UAAuBkC,EAAQU,SAA/B,aAEJ,sBAAK5C,UAAU,iBAAf,UACI,qBAAKA,UAAU,2BACf,sBAAKA,UAAU,OAAf,UAAuBkC,EAAQW,SAA/B,UAEJ,sBAAK7C,UAAU,iBAAf,UACI,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,OAAf,SAAuBwB,EAAQU,EAAQY,cAE3C,sBAAK9C,UAAU,iBAAf,UACI,qBAAKA,UAAU,yBACf,qBAAKA,UAAU,OAAf,SAAuBwB,EAAQU,EAAQQ,oBC1DrDK,G,MAAW,CAAC,UAAW,SAAU,UAAW,aAAc,YAAa,UAAW,cAClFC,EAAa,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAqBnHC,MAnBf,YAAsE,IAAlDC,EAAiD,EAAjDA,SAAUC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aACjDvB,QAAQC,IAAImB,GACZ,IAAIvB,EAAO,IAAIC,KAAgB,IAAXsB,GAChBI,EAAS3B,EAAK4B,SACdC,EAAW7B,EAAK8B,WAChBC,EAAU/B,EAAKH,UAEnB,OACI,+BACI,6BAAKwB,EAAWQ,GAAY,KAAOE,IACnC,6BAAKX,EAASO,KACd,6BAAKH,IACL,+BAAK7B,KAAKC,MAAM6B,GAAhB,UACA,+BAAK9B,KAAKC,MAAM8B,GAAhB,WCgBGM,MA5Bf,YAA4C,IAAnBC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,KAC/B,OACI,qBAAK7D,UAAU,uBAAf,SACM6D,EAkBa,oFAjBX,kCACI,qBAAI7D,UAAU,YAAd,UACI,sCACA,qCACA,6CACA,0CACA,6CAEH4D,GAAYA,EAASE,KAAI,SAACC,EAAGC,GAAJ,OACtB,cAAC,EAAD,CAEId,SAAUU,EAASI,GAAG5B,GACtBe,SAAU9B,EAAiBuC,EAASI,GAAGxB,KAAKyB,SAAW,SACvDb,YAAaQ,EAASI,GAAGpB,SACzBS,aAAcO,EAASI,GAAGnB,UAJrBmB,EAAI,gBC0BtBE,MAxCf,YAA8B,IAATC,EAAQ,EAARA,KACjB,EAA8BC,oBAAS,GAAvC,mBAAOjD,EAAP,KAAgBkD,EAAhB,KAEA,OACI,sBAAKrE,UAAU,kBAAf,UACI,sBAAKA,UAAU,WAAf,UACI,qBAAKA,UAAU,OAAf,SAAuBmE,EAAKG,KAAOH,EAAKI,KAAKC,KAAOL,EAAKK,OACzD,qBAAKxE,UAAU,wBAAf,SACKmE,EAAKG,KACF,cAAC,EAAD,CACInD,QAASA,EACTP,SAAU,kBAAMyD,GAAYlD,IAC5BC,UAAU,IACVH,UAAU,MAEd,cAAC,EAAD,CACIE,QAASA,EACTP,SAAU,kBAAMyD,GAAYlD,IAC5BC,UAAU,IACVH,UAAU,gBAKzBkD,EAAKG,KACF,cAAC,EAAD,CACIT,KAAM1C,EACNyC,SAAUO,EAAKG,KAAKG,MAAM,EAAG,KAEjC,cAAC,EAAD,CACItC,cAAehB,EACfe,QAAO,2BAAOiC,EAAKO,MAASP,EAAKQ,KACjCvC,GAAI+B,EAAK/B,GACTC,eAAgB8B,EAAKS,QAAQ,GAAGF,W,MC7BrCG,MAPf,WAEI,OACI,qBAAK7E,UAAU,QAAf,4BCmFQ8E,MA/EhB,WACI,IAAIC,EAAWC,cAEPR,EAASS,cAATT,KAER,EAAwBJ,mBAAS,CAC7BrD,MAAO,GACPmE,YAAa,KACbC,aAAa,EACbC,OAAO,IAJX,mBAAOjB,EAAP,KAAakB,EAAb,KAOAC,qBAAU,WACDd,GAGLe,EAAaf,KACd,CAACA,IAGJ,IAcMe,EAAe,SAAChB,GAClBiB,MAAM,qDAAD,OAAsDrB,EAAKgB,YAAc,gBAAkB,UAA3F,cAA0GZ,GAAQ,CACnH,OAAU,MACV,QAAW,CACP,kBAAmB,4CACnB,iBAAkB,wDAIrBkB,MAAK,SAAAC,GACF,IAAIA,EAASC,GAKT,MAAM,IAAIC,MAAM,wBAJhBF,EAASG,OAAOJ,MAAK,SAACK,GAAD,OAAST,EAAQ,2BAAKlB,GAAN,IAAYe,YAAaY,EAAKV,OAAO,QAC1EtD,QAAQC,IAAI2D,GACZ5D,QAAQC,IAAIoC,EAAKiB,UAKxBW,OAAM,WACHjE,QAAQC,IAAI,SACZsD,EAAQ,2BAAKlB,GAAN,IAAYiB,OAAO,SAG7BZ,GAAQL,EAAKpD,OACdgE,EAAS,sBAAwBZ,EAAKpD,QAI9C,OACI,gCACI,cAAC,EAAD,CACIR,UAAW,cAAC,EAAD,CAAWQ,MAAOoD,EAAKpD,MAAOH,SA7ChC,SAACD,GAClB0E,EAAQ,2BAAKlB,GAAN,IAAYpD,MAAOJ,EAAMqF,OAAOjF,SACpB,UAAfJ,EAAMsF,OACNtF,EAAMuF,iBACNvF,EAAMwF,kBACNZ,EAAapB,EAAKpD,WAyCdP,OAAQ,cAAC,EAAD,CAAQW,QAASgD,EAAKgB,YAAavE,SApCpC,WACfyE,EAAQ,2BAAKlB,GAAN,IAAYgB,aAAchB,EAAKgB,gBAmCmClE,UAAU,MAAMG,UAAU,SAC3FX,WAAY,cAAC,EAAD,CAAYO,QAAS,kBAAMuE,EAAapB,EAAKpD,YAE5DoD,EAAKiB,MACF,cAAC,EAAD,IACAjB,EAAKe,aACL,cAAC,EAAD,CAAWf,KAAMA,EAAKe,cAE1B,qBAAK/E,MAAO,CAAEC,OAAQ,cCtEnB,SAASgG,EAAI9F,GAC1B,OACE,cAAC,IAAD,UACE,sBAAKN,UAAU,MAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOqG,KAAK,IAAIC,OAAK,EAACC,QAAS,cAACrG,EAAD,MAC/B,eAAC,IAAD,CAAOmG,KAAK,qBAAZ,UACE,cAAC,IAAD,CACEA,KAAK,QACLE,QACE,cAAC,EAAD,CACEpC,KAAM7D,EAAM6D,KACZqC,aAAclG,EAAMkG,aACpBC,WAAYnG,EAAMmG,WAClBlB,aAAcjF,EAAMiF,iBAG1B,cAAC,IAAD,CACEc,KAAK,GACLE,QACE,cAAC,EAAD,CACEpC,KAAM7D,EAAM6D,KACZqC,aAAclG,EAAMkG,aACpBC,WAAYnG,EAAMmG,WAClBlB,aAAcjF,EAAMiF,8BClCxCmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e3ca213e.chunk.js","sourcesContent":["import React from 'react'\nimport './header.css'\nimport { Link } from \"react-router-dom\"\n\nfunction Header() {\n    return (\n        <div >\n            <header className=\"App-header\">\n                <Link to=\"/\"><p>WeatherNow</p></Link>\n            </header>\n        </div>\n    )\n}\n\nexport default Header","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './home.css'\n\n\nexport default function Home() {\n    return (\n        <div>\n            <div className=\"description\">\n                OpenWeatherMap — онлайн сервис, который предоставляет платный (есть функционально ограниченная бесплатная версия) API для доступа к данным о текущей погоде, прогнозам и историческим данным. В качестве источника данных используются официальные метеорологические службы, данные из метеостанций аэропортов, и данные с частных метеостанций. Информация обрабатываются OpenWeatherMap, после чего, на основе данных строится прогноз погоды и погодные карты, например карты облачности и осадков. Основной идеей сервиса OWM является использование частных погодных станций, которые помогают повысить точность исходной погодной информации и, как следствие, точность прогнозов погоды. Вдохновителями OpenWeatherMap были картографический сервис OpenStreetMap и Википедия, создающие свободную информацию и предоставляющие её бесплатно для всех. В настоящее время OWM является коммерческой организацией.\n            </div>\n            <Link to=\"/check-the-weather/\">\n                <div className=\"container-check\">\n                    <button>Сheck the weather</button>\n                </div>\n                <div style={{ height: \"30px\" }}></div>\n            </Link>\n        </div >\n    )\n}","import React from 'react';\nimport './search.css'\n\nfunction Search(props) {\n    return (\n        <div className=\"content\">\n            <h1>Enter the city to get the weather:</h1>\n            <div className=\"container-search\">\n                {props.InputCity}\n                <div className=\"container-toggle-searchCity\">\n                    <div className=\"container-toggle\">{props.Toggle}</div>\n                    {props.SearchCity}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Search","import React from 'react';\nimport './inputCity.css';\n\nfunction InputCity(props) {\n    return (\n        <div className=\"container-city\">\n            <input\n                onKeyDown={(event) => props.onChange(event)}\n                autoFocus\n                placeholder=\"Input city\"\n                value={props.value}\n                onChange={props.onChange}>\n            </input>\n        </div>\n    )\n}\n\nexport default InputCity","import React from 'react';\nimport './searchCity.css';\n\nfunction SearchCity(props) {\n\n    return (\n        <div className=\"container-citySearch\">\n            <button onClick={props.onClick}>Search</button>\n        </div>\n    )\n}\n\nexport default SearchCity","import React from 'react'\nimport './toggle.css'\n\nfunction Toggle(props) {\n    return (\n        <div className=\"switcher\">\n            <div className=\"container-unit green\"><div>{props.leftField}</div></div>\n            <label className=\"switch\">\n                <input type=\"checkbox\" checked={props.checked} onChange={props.onChange}></input>\n                <span className=\"slider round\"></span>\n            </label>\n            <div className=\"container-unit blue\"><div>{props.rightFied}</div></div>\n        </div>\n    )\n}\n\nexport default Toggle","export const convertToCelsium = (value) => {\n    return Math.round(value - 273)\n}\n\nexport const getDate = (timestamp) => {\n    let date = new Date(timestamp * 1000);\n    let min;\n    if (date.getMinutes() < 10) {\n        min = '0' + date.getMinutes()\n    } else {\n        min = date.getMinutes()\n    } console.log(timestamp);\n    return date.getHours() + \":\" + min;\n}\n\n","import React from 'react'\nimport { getDate, convertToCelsium } from '../../../utils'\nimport './tableInfoDay.css'\n\nfunction TableInfoDay({ dayData, tempInCelsium, dt, weatherProfile }) {\n\n    const [profile, bg, temp, info] = (() => {\n        let profile, bg, temp, info\n\n        switch (weatherProfile) {\n            case 'Clouds': profile = 'cloud'\n                break\n            case 'Clear': profile = ''\n                break\n            case 'Snow': profile = 'snow'\n                break\n            case 'Rain': profile = 'rain'\n                break\n        }\n\n        if (dt > dayData.sunset) {\n            bg = 'bg-night'\n            temp = 'temp-night'\n            info = 'info-night'\n        } else {\n            bg = 'bg-day'\n            temp = 'temp-day'\n            info = 'info-day'\n        }\n\n        return [profile, bg, temp, info]\n    })()\n\n    return (\n        <div className={`container-table-info ${profile} ${bg}`}>\n            <div className=\"container-temp\">\n                <div style={{ display: \"flex\" }}>\n                    {dt < dayData.sunset ?\n                        <div className=\"bg-img-solar\"></div> :\n                        <div className=\"bg-img-moon\"></div>}\n                    <div className={`temp ${temp}`}>\n                        <div>{!tempInCelsium ? convertToCelsium(dayData.temp) + '℃' : Math.round(dayData.temp) + 'K'}</div>\n                    </div>\n                </div>\n            </div>\n            <div className={`container-info ${info}`}>\n                <div className=\"container-item\">\n                    <div className=\"img-info icon-pressure\"></div>\n                    <div className=\"info\">{dayData.pressure} hPa</div>\n                </div>\n                <div className=\"container-item\">\n                    <div className=\"img-info icon-humidity\"></div>\n                    <div className=\"info\">{dayData.humidity}%</div>\n                </div>\n                <div className=\"container-item\">\n                    <div className=\"img-info icon-sunrise\"></div>\n                    <div className=\"info\">{getDate(dayData.sunrise)}</div>\n                </div>\n                <div className=\"container-item\">\n                    <div className=\"img-info icon-sunset\"></div>\n                    <div className=\"info\">{getDate(dayData.sunset)}</div>\n                </div>\n            </div>\n        </div >\n    )\n}\n\nexport default TableInfoDay","import React from 'react'\n\nconst weekDays = ['Sunday ', 'Monday', 'Tuesday', 'Wednesday ', 'Thursday ', 'Friday ', 'Saturday ']\nconst yearMonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\nfunction TableRow({ weekDate, weekTemp, weekPessure, weekhumidity }) {\n    console.log(weekDate);\n    let date = new Date(weekDate * 1000);\n    let dayNum = date.getDay()\n    let monthNum = date.getMonth()\n    let dateNum = date.getDate()\n\n    return (\n        <tr>\n            <td>{yearMonths[monthNum] + ', ' + dateNum}</td>\n            <td>{weekDays[dayNum]}</td>\n            <td>{weekTemp}</td>\n            <td>{Math.round(weekPessure)} hPa</td>\n            <td>{Math.round(weekhumidity)}%</td>\n        </tr>\n\n    )\n}\n\nexport default TableRow","import React from 'react'\nimport './tableInfoWeek.css'\nimport TableRow from './TableRow/TableRow'\nimport { convertToCelsium } from '../../../utils'\n\n\nfunction TableInfoWeek({ weekData, view }) {\n    return (\n        <div className=\"container-table-info\">\n            {!view ?\n                <table>\n                    <tr className=\"tableHead\">\n                        <th>Date</th>\n                        <th>Day</th>\n                        <th>Temperature</th>\n                        <th>Pressure</th>\n                        <th>Humidity</th>\n                    </tr>\n                    {weekData && weekData.map((e, i) => (\n                        <TableRow\n                            key={i + '123'}\n                            weekDate={weekData[i].dt}\n                            weekTemp={convertToCelsium(weekData[i].temp.average) + '℃'}\n                            weekPessure={weekData[i].pressure}\n                            weekhumidity={weekData[i].humidity}\n                        />\n                    ))}\n                </table> : <div>я пидорас</div>\n            }\n\n        </div >\n    )\n}\n\nexport default TableInfoWeek","import React, { useState } from 'react'\nimport './tableInfo.css'\nimport Toggle from '../ui/Toggle'\nimport TableInfoDay from './TableInfoDay/TableInfoDay'\nimport TableInfoWeek from './TableInfoWeek/TableInfoWeek'\n\nfunction TableInfo({ data }) {\n    const [checked, setChecked] = useState(false)\n\n    return (\n        <div className=\"container-table\">\n            <div className=\"cityName\">\n                <div className=\"city\">{data.list ? data.city.name : data.name}</div>\n                <div className=\"container-toggle-weat\">\n                    {data.list ?\n                        <Toggle\n                            checked={checked}\n                            onChange={() => setChecked(!checked)}\n                            rightFied=\"2\"\n                            leftField=\"1\"\n                        /> :\n                        <Toggle\n                            checked={checked}\n                            onChange={() => setChecked(!checked)}\n                            rightFied=\"K\"\n                            leftField=\"℃\"\n                        />\n                    }\n                </div>\n            </div>\n            {data.list ?\n                <TableInfoWeek\n                    view={checked}\n                    weekData={data.list.slice(0, 7)}\n                /> :\n                <TableInfoDay\n                    tempInCelsium={checked}\n                    dayData={{ ...data.main, ...data.sys }}\n                    dt={data.dt}\n                    weatherProfile={data.weather[0].main}\n                />\n            }\n        </div >\n    )\n}\n\nexport default TableInfo","import React from 'react'\nimport './errorWindow.css'\n\nfunction ErrorWindow() {\n\n    return (\n        <div className=\"error\">Invalid city!</div>\n    )\n}\n\nexport default ErrorWindow","import React, { useState, useEffect } from 'react'\nimport Search from '../Search/Search'\nimport InputCity from '../Search/InputCity/InputCity'\nimport SearchCity from '../Search/SearchCity/SearchCity'\nimport TableInfo from '../TableInfo/TableInfo'\nimport Toggle from '../ui/Toggle'\nimport ErrorWindow from '../ErrorWindow/ErrorWindow'\nimport { useNavigate, useParams } from \"react-router-dom\"\n\n\nfunction Weather() {\n    let navigate = useNavigate();\n\n    const { name } = useParams();\n\n    const [data, setData] = useState({\n        value: '',\n        responseObj: null,\n        checkedWeat: false,\n        error: false\n    })\n\n    useEffect(() => {\n        if (!name) {\n            return\n        }\n        getTableInfo(name)\n    }, [name])\n\n\n    const handleChange = (event) => {\n        setData({ ...data, value: event.target.value })\n        if (event.code === \"Enter\") {\n            event.preventDefault()\n            event.stopPropagation()\n            getTableInfo(data.value)\n\n        }\n    }\n\n    const changeWeat = () => {\n        setData({ ...data, checkedWeat: !data.checkedWeat })\n    }\n\n    const getTableInfo = (city) => {\n        fetch(`https://community-open-weather-map.p.rapidapi.com/${data.checkedWeat ? 'climate/month' : 'weather'}?q=${city}`, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n                \"x-rapidapi-key\": \"4e894cd36amsh98aee08d4799ad6p110de9jsn32448b93205d\"\n            }\n        })\n\n            .then(response => {\n                if (response.ok) {\n                    response.json().then((res) => setData({ ...data, responseObj: res, error: false }))\n                    console.log(response)\n                    console.log(data.error)\n                } else {\n                    throw new Error('Something went wrong')\n                }\n            })\n            .catch(() => {\n                console.log('errrr')\n                setData({ ...data, error: true })\n            })\n\n        if (!name && data.value) {\n            navigate('/check-the-weather/' + data.value)\n        }\n    }\n\n    return (\n        <div>\n            <Search\n                InputCity={<InputCity value={data.value} onChange={handleChange} />}\n                Toggle={<Toggle checked={data.checkedWeat} onChange={changeWeat} leftField=\"day\" rightFied=\"week\" />}\n                SearchCity={<SearchCity onClick={() => getTableInfo(data.value)} />}\n            />\n            {data.error ?\n                <ErrorWindow /> :\n                data.responseObj &&\n                <TableInfo data={data.responseObj} />\n            }\n            <div style={{ height: \"30px\" }}></div>\n        </div>\n    )\n}\n\nexport default (Weather)","import React from 'react'\nimport './App.css'\nimport Header from './components/Header/Header'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Routes,\n} from \"react-router-dom\";\nimport Home from './components/Home/Home'\nimport Weather from './components/Weather/Weather'\n// import Footer from './components/Footer/Footer';\n\n\n\nexport default function App(props) {\n  return (\n    <Router>\n      <div className=\"App\" >\n        <Header />\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" exact element={<Home />} />\n            <Route path=\"/check-the-weather\">\n              <Route\n                path=\":name\"\n                element={\n                  <Weather\n                    data={props.data}\n                    handleChange={props.handleChange}\n                    changeWeat={props.changeWeat}\n                    getTableInfo={props.getTableInfo}\n                  />}\n              />\n              <Route\n                path=\"\"\n                element={\n                  <Weather\n                    data={props.data}\n                    handleChange={props.handleChange}\n                    changeWeat={props.changeWeat}\n                    getTableInfo={props.getTableInfo}\n                  />}\n              />\n            </Route>\n          </Routes>\n        </div>\n        {/* <Footer /> */}\n      </div>\n    </Router >\n  )\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}